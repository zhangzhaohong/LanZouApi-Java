# 应用名称
spring.application.name=tools-api
spring.application.version=1.0.7.6
# suppress inspection "SpringBootApplicationProperties"
spring.application.build.time=202206072125
spring.jmx.enabled=true
server.address=0.0.0.0
server.real.address=192.168.2.250
# 应用服务 WEB 访问端口
server.port=8080
# 激活的环境
spring.profiles.active=prod
# spring.profiles.active=docker
server.tomcat.uri-encoding=UTF-8
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force=true
server.servlet.encoding.enabled=true
spring.servlet.multipart.max-file-size=1024MB
spring.servlet.multipart.max-request-size=1024MB
# server.tomcat.connection-timeout=20000
server.tomcat.accept-count=3000
server.tomcat.max-connections=10000
# 文件的路径和级别已经在logback-spring.xml中设置
logging.config=classpath:config/logback-spring.xml
################ Redis 基础配置 ##############
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=192.168.2.250
# Redis服务器连接端口
spring.redis.port=55000
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 链接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000
################ Redis 线程池设置 ##############
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0
# mybatis
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.2.250:55001/stock?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.configuration.auto-mapping-behavior=full
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.configuration.use-generated-keys=true
# rocketmq
rocketmq.admin-server=192.168.2.250:55003
rocketmq.name-server=192.168.2.250:55002
rocketmq.producer.group=STOCK-TOOLS-ROCKETMQ-GROUP
# THYMELEAF (ThymeleafAutoConfiguration)
# 开启模板缓存（默认值： true ）改成false
spring.thymeleaf.cache=false
# 检查模板是否存在，然后再呈现
spring.thymeleaf.check-template=true
# 检查模板位置是否正确（默认值 :true ）
spring.thymeleaf.check-template-location=true
#Content-Type 的值（默认值： text/html ）
spring.thymeleaf.content-type=text/html
# 开启 MVC Thymeleaf 视图解析（默认值： true ）
spring.thymeleaf.enabled=true
# 模板编码
spring.thymeleaf.encoding=UTF-8
# 要被排除在解析之外的视图名称列表，⽤逗号分隔
spring.thymeleaf.excluded-view-names=
# 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)
spring.thymeleaf.mode=HTML5
# 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:/templates/ ）
spring.thymeleaf.prefix=classpath:/templates/
# 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）
spring.thymeleaf.suffix=.html
spring.mvc.view.suffix=.html
spring.web.resources.static-locations=classpath:/templates/,classpath:/static/
# xbogus
# suppress inspection "SpringBootApplicationProperties"
xbogus.host=http://192.168.2.250:6000/
# xbogus.host=https://signature-project.vercel.app/
# admin server
spring.security.user.name=admin
spring.security.user.password=superadmin
spring.boot.admin.client.url=http://192.168.2.250:55004
spring.boot.admin.client.username=${spring.security.user.name}
spring.boot.admin.client.password=${spring.security.user.password}
spring.boot.admin.client.instance.service-url=http://192.168.2.250:8080
spring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}
spring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}
spring.boot.admin.client.instance.prefer-ip=true
spring.boot.admin.client.instance.name=${spring.application.name}
management.endpoints.web.exposure.include=*
management.endpoint.logfile.enabled=true
management.endpoint.logfile.external-file=./ServiceData/logs/info.log
management.info.env.enabled=true
# kafka
# suppress inspection "SpringBootApplicationProperties"
spring.kafka.management-server=http://192.168.2.250:55011
spring.kafka.bootstrap-servers=192.168.2.250:55009
spring.kafka.jaas.enabled=false
spring.kafka.properties.security.protocol=PLAINTEXT
# spring.kafka.properties.sasl.mechanism=PLAIN
# spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret";
# 发生错误后，消息重发的次数
spring.kafka.producer.retries=3
#当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算
spring.kafka.producer.batch-size=16384
# 设置生产者内存缓冲区的大小
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=1
# acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
# acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
# acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
# elasticsearch
# suppress inspection "SpringBootApplicationProperties"
spring.elasticsearch.kibana.uris=http://192.168.2.250:55007
spring.elasticsearch.uris=http://192.168.2.250:55005
spring.elasticsearch.username=elastic
spring.elasticsearch.password=superadmin